// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  role            String    @default("user")
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  passwordId String? @unique @db.ObjectId
  password Password? @relation(fields: [passwordId], references: [id], onDelete: Cascade)

  chats Chat[]
  seenMessages Message[] @relation("Seen")
  messages Message[]

  Account         Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Password {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  hash      String   // The hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation

}



enum ChatType {
  ONE_TO_ONE
  GROUP
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  type ChatType

  userIds String[] @db.ObjectId
  users User @relation(fields: [userIds], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  lastMessageAt  DateTime @updatedAt
}

enum MessageType {
  TEXT
  FILE
  AUDIO
  VIDEO
  IMAGE
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  type MessageType

  chatId String @db.ObjectId
  chat Chat @relation(fields: [chatId],references: [id])

  seenIds String[] @db.ObjectId
  seen User @relation("Seen", fields: [seenIds], references: [id])

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id])

  createdAt DateTime @default(now())
}