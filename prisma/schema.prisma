// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fullName String?
  userName String @unique
  email String @unique
  emailVerified DateTime?
  profileImage String?
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

 
  chats Chat[]
  seenMessages Message[] @relation("Seen")
  

  sessions Session[]
  messages Message[]

  passwordId String? @unique @db.ObjectId
  password Password? @relation(fields: [passwordId], references: [id], onDelete: Cascade)

}

model Password {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  hash      String   // The hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User? @relation

}


model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refreshToken String?
  accessToken String?
  expiresAt Int ?
  tokenType String?
  scope String?
  idToken String? @db.String
  state String?

  
  user User @relation(fields: [userId], references: [id], onDelete:Cascade)


  @@unique([providerAccountId, provider])
  @@index([userId])
}


enum ChatType {
  ONE_TO_ONE
  GROUP
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  type ChatType

  userIds String[] @db.ObjectId
  users User @relation(fields: [userIds], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  lastMessageAt  DateTime @updatedAt
}

enum MessageType {
  TEXT
  FILE
  AUDIO
  VIDEO
  IMAGE
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  type MessageType

  chatId String @db.ObjectId
  chat Chat @relation(fields: [chatId],references: [id])

  seenIds String[] @db.ObjectId
  seen User @relation("Seen", fields: [seenIds], references: [id])

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id])

  createdAt DateTime @default(now())
}